
    def get_characteristic_paths(self):
        result = []
        for chrc in self.characteristics:
            result.append(chrc.get_path())
        return result

    def get_characteristics(self):
        return self.characteristics

class Characteristic(dbus.service.Object):
    """
    org.bluez.GattCharacteristic1 interface implementation
    """
    def __init__(self, bus, index, uuid, flags, service):
        self.path = service.path + '/char' + str(index)
        self.bus = bus
        self.uuid = uuid
        self.service = service
        self.flags = flags
        dbus.service.Object.__init__(self, bus, self.path)

    def get_properties(self):
        return {
                GATT_CHRC_IFACE: {
                        'Service': self.service.get_path(),
                        'UUID': self.uuid,
                        'Flags': self.flags,
                }
        }

    def get_path(self):
        return dbus.ObjectPath(self.path)

    @dbus.service.method(GATT_CHRC_IFACE, in_signature='aya{sy}')
    def WriteValue(self, value, options):
        print('Default WriteValue called, returning error')

class PointPathsService(Service):
    """
    Fake Heart Rate Service that simulates a fake heart beat and control point
    behavior.

    """
    HR_UUID = '0000180d-0000-1000-8000-00805f9b34fb'

    def __init__(self, bus, index):
        Service.__init__(self, bus, index, self.HR_UUID, True)
        self.add_characteristic(PointPathsChrc(bus, 0, self))
        self.energy_expended = 0

class PointPathsChrc(Characteristic):
    HR_MSRMT_UUID = '00002a37-0000-1000-8000-00805f9b34fb'
    value = ''

    def __init__(self, bus, index, service):
        Characteristic.__init__(
                self, bus, index,
                self.HR_MSRMT_UUID,
                ['write'],
                service)

    bbox_turn = False
    value_str = ''
    bbox = []

    @dbus.service.method(GATT_CHRC_IFACE, in_signature='aya{sy}')
    def WriteValue(self, value, options):
        segment_str = ''.join([chr(v) for v in value])
        if segment_str == '<start>':
            self.value = ''
            self.value_str = ''
            self.bbox_turn = True
        elif self.bbox_turn:
            self.bbox = json.loads(segment_str)
            self.bbox_turn = False
        elif segment_str == '<end>':
            self.value = json.loads(self.value_str)
            print(self.bbox, self.value_str)
        else:
            self.value_str += segment_str

        step_paths = convert_paths_to_step_paths(self.bbox, self.value)
        drawer = Drawer()
        drawer.draw(step_paths)

def register_app_cb():
    print('GATT application registered')

def register_app_error_cb(error):
    print('Failed to register application: ' + str(error))
    mainloop.quit()


def find_adapter(bus):
    remote_om = dbus.Interface(bus.get_object(BLUEZ_SERVICE_NAME, '/'),
                               DBUS_OM_IFACE)
    objects = remote_om.GetManagedObjects()

    for o, props in objects.items():
        if GATT_MANAGER_IFACE in props.keys():
            return o

    return None
